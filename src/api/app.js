//Check package.json for alias paths (@somepath etc.)
require('module-alias/register');
let express = require('express');
let cors = require('cors');
let rateLimit = require('express-rate-limit');
let xss = require('xss-clean');
let helmet = require('helmet');
let path = require('path');
let fs = require('fs');
let cookieParser = require('cookie-parser');
let logger = require('morgan');
const expressOasGenerator = require('express-oas-generator');
const HTTP_STATUS = require('http-status-codes');

const LOGGER = require("./util/logger");

let indexRouter = require('./rest/endpoints/api-docs');
let apiRouter = require('./rest/api');
let authRouter = require('./rest/authentication');

let app = express();

//Setup to generate a swagger config file
//Serves as a starter for a more extended description
//of the API (autogenerated)
expressOasGenerator.init(app,
    function (spec) {
        return spec;
    },
    'src/resource/refuge-api.swagger.json',
    60 * 1000);

//Setup logger
// create a write stream (in append mode)

let accessLogStream = fs.createWriteStream(path.join(__dirname, '../resource/log/access.log'), {flags: 'a'});
app.use(logger('combined', {stream: accessLogStream}));
if (process.env.NODE_ENV === "development") {
    app.use(logger('dev'));
}

app.use(express.json({limit: '10kb'}));
app.use(express.urlencoded({extended: false}));
app.use(cookieParser());
app.use(cors());
app.use(helmet());
app.use(xss());
app.use(express.static(path.join(__dirname, '../resource/static')));

const limit = rateLimit({
    max: 100,// max requests
    windowMs: 60 * 60 * 1000, // 1 Hour
    message: 'Too many requests' // message to send
});

app.use('/**', limit);

app.use('/', indexRouter);
app.use('/auth', authRouter);
app.use('/api', apiRouter);

// error handler
app.use(function (err, req, res, next) {
    // set locals, only providing error in development
    res.locals.message = err.message || "Error";
    res.locals.error = req.app.get('env') === 'development' ? err : {};

    res.status(err.status || HTTP_STATUS.INTERNAL_SERVER_ERROR)
        .json({message: `Something went wrong! ${err.message}`});
    LOGGER.error("Server error: ", {exception: err, request: req.url});
});

module.exports = app;
